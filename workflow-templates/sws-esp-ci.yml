name: ESP Microservers CI

# Controls when the workflow will run
on:
  workflow_dispatch:
env:
  ESP_ACR_ENDPOINT: ${{ secrets.ESP_ACR_ENDPOINT }}
  ESP_SERVICE_APP_NAME: ''

#  Some of the jobs run in parallel mode.
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # GIT checkout from the requested branch
      - uses: actions/checkout@v3
      # Setup node environment for application
      - name: Use Node JS
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.1"
      # Cache node_modules for performance improvements
      - name: Cache node modules
        id: lint-cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: lint-cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install npm packages
        # if the node_modules are already  cached, then no need to install npm packages
        if: steps.lint-cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Run lint
        run: npm run lint
  test:
    runs-on: ubuntu-latest

    steps:
      # GIT checkout from the requested branch
      - uses: actions/checkout@v3
      # Setup node environment for application
      - name: Use Node JS
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.1"

      - name: Cache node modules
        id: test-cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: test-cache-node-modules
        with:
          # Cache node_modules for performance improvements
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install npm packages
        # If the node_modules are already cached, then no need to install npm packages
        if: steps.test-cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
        # Run test cases for the application
      - name: Run Unit tests with coverage
        run: npm run test
  # We will add more steps with package_check
  package_check:
    runs-on: ubuntu-latest

    steps:
      # GIT checkout from the requested branch
      - uses: actions/checkout@v3
      # Setup node environment for application
      - name: Use Node JS
        uses: actions/setup-node@v3
        with: 
          node-version: "18.16.1"
      # login to the docker container registry to publish docker images
      # Before using the below steps the secret variables need available on the repository or organization level
      - name: Docker Login
        run: docker login ${{ secrets.ESP_ACR_ENDPOINT }} -u ${{ secrets.ESP_ACR_USERNAME }} -p ${{ secrets.ESP_ACR_PASSWORD }}
      # Verify that the same docker image exists or not
      - name: Docker image tag verify
        run: make package_check

  build_publish:
    runs-on: ubuntu-latest
    # Once all job runs have finished then publish the docker job will start running
    needs: [test, lint, package_check]
    steps:
      # GIT checkout from the requested branch
      - uses: actions/checkout@v3
      # log in to the docker container registry to publish docker images 
      # Before using the below steps the secret variables need available on the repository or organization level
      - name: Docker Login
        run: docker login ${{ secrets.ESP_ACR_ENDPOINT }} -u ${{ secrets.ESP_ACR_USERNAME }} -p ${{ secrets.ESP_ACR_PASSWORD }}
      # Build a docker image
      - name: Docker build
        run: |
          export RELEASE_VERSION=$(cat package.json | jq -r .version)
          if [ "${GITHUB_REF##*/}" != "main" ]; then
            RELEASE_VERSION="$RELEASE_VERSION-dev"
          fi
          make container_build
      # Create Trivy Scan report
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          ESP_DOCKER_SCAN_LOG_LEVEL: ${{ secrets.DOCKER_SCAN_LEVEL || 'CRITICAL' }}
        with:
            image-ref: 'esp-${{ env.ESP_SERVICE_APP_NAME }}/api'
            format: 'template'
            template: '@/contrib/sarif.tpl'
            ignore-unfixed: false
            vuln-type: 'os,library'
            severity: ${{env.ESP_DOCKER_SCAN_LOG_LEVEL}}
            output: 'results.sarif'
          
      # Publish the docker scan report
      - name: Publish Scan Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif

      # Publish the docker image 
      - name: Docker publish 
        run: |
          export RELEASE_VERSION=$(cat package.json | jq -r .version)
          if [ "${GITHUB_REF##*/}" != "main" ]; then
            RELEASE_VERSION="$RELEASE_VERSION-dev"
          fi
          make container_publish
      # Tag  the branch
      - name: Tag Git Branch
        run: |
          export RELEASE_VERSION=$(cat package.json | jq -r .version)
          if [ "${GITHUB_REF##*/}" != "main" ]; then
            RELEASE_VERSION="$RELEASE_VERSION-dev"
          fi
          git config user.email "esp-github-runner@zebra.com"
          git config --global user.name "ESP Github Runner"
          git tag -a "v$RELEASE_VERSION" -m "Release v$RELEASE_VERSION"
          git push origin "v$RELEASE_VERSION"
